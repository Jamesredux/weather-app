{"version":3,"sources":["components/WeatherData.js","components/HourlyData.js","images/snow.jpg","images/cloudy.jpg","images/clear.jpg","images/thunderstorm.jpg","images/rain.jpg","images/weather.jpg","components/content.js","components/form.js","components/footer.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherData","prevProps","props","this","data","city","country","sunrise","sunset","temp","feels_like","uvi","humidity","dt","icon","details","className","units","src","height","width","alt","Component","HourlyData","hourList","hourly","map","hour","time","main","pop","id","Content","isEmpty","obj","Object","keys","length","state","error","current","getCoords","bind","getWeather","changeScale","coordinates","console","log","push","lat","lon","a","coords","process","fetch","then","res","ok","Error","statusText","json","catch","err","setState","message","weatherData","updateWeatherState","updateBackground","weather","timezone","currentData","parseCurrentData","hourlyData","parseHourlyData","weatherId","background","htmlElement","document","documentElement","thunderstorm","rain","snow","clear","cloudy","style","backgroundImage","editedData","name","Math","round","description","dateTime","getDateTime","getTime","convertedDate","fromUnixTime","zonedDate","utcToZonedTime","format","timesZone","localTime","timeZone","convertTemp","scale","newHourly","updateHourlyTemps","currentTemps","newCurrentTemps","convertCurrentTemps","updateTemps","array","newArray","forEach","calcNewTemp","newTemp","getCelsiusFromFahrenheit","getFahrenheitFromCelsius","prevState","f","c","splice","convertHourlyData","resultObject","faSearch","Form","value","searchResult","handleChange","handleSubmit","updateState","event","target","e","fetchCity","preventDefault","handleError","cityResult","searchError","submitForm","onSubmit","type","placeholder","onChange","onClick","React","Footer","href","App","errorMessage","updateCity","cityData","checked","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.810cb15f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass WeatherData extends Component {\n  componentDidUpdate(prevProps, props) {}\n\n  render() {\n    const {\n      city,\n      country,\n      sunrise,\n      sunset,\n      temp,\n      feels_like,\n      uvi,\n      humidity,\n      dt,\n      icon,\n      details,\n    } = this.props.data;\n    return (\n      <div className='weather-current'>\n        <div className='city-name'>\n          <div className='large city-box'>{city},</div>\n          <div className='large'>{country}</div>\n        </div>\n        <div className='date-box'>\n          <div className='current-time yellow'>{dt}</div>\n        </div>\n        <div className='main-info-box'>\n          <div className='current-temp'>\n            {temp}\n            {this.props.units === 'metric' ? (\n              <span>&#xb0;C</span>\n            ) : (\n              <span>&#xb0;F</span>\n            )}\n          </div>\n          <div className='details-icon'>\n            <img\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n              height='100'\n              width='100'\n              alt='icon'\n            />\n          </div>\n        </div>\n        <div className='extra-box-1'>\n          <div className='details-extra'>{details}</div>\n          <div className='feels-like'>\n            Feels Like: {feels_like}\n            {this.props.units === 'metric' ? (\n              <span>&#xb0;C</span>\n            ) : (\n              <span>&#xb0;F</span>\n            )}\n          </div>\n        </div>\n        <div className='extra-box-2'>\n          <div className='uvi'>UVI: {uvi}</div>\n          <div className='humidity'>Humidity: {humidity}</div>\n        </div>\n        <div className='sunrise-sunset'>\n          <div className='sunrise'>\n            Sunrise: <span className='yellow'>{sunrise}</span>\n          </div>\n          <div className='sunset'>\n            Sunset: <span className='yellow'>{sunset}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherData;\n","import React, { Component } from 'react';\n\nclass HourlyData extends Component {\n  render() {\n    const hourList = this.props.hourly.map((hour) => (\n      <div className='hour-row' key={hour.id}>\n        <div className='hour-box yellow bigger'>\n          <p>{hour.time}</p>\n        </div>\n        <div className='hour-temp bigger'>\n          <p>\n            {hour.temp}\n            {this.props.units === 'metric' ? (\n              <span>&#xb0;C</span>\n            ) : (\n              <span>&#xb0;F</span>\n            )}\n          </p>\n        </div>\n        <div className='hour-weather bigger'>\n          <p>{hour.main}</p>\n        </div>\n        <div className='rain-chance'>Chance of Rain: {hour.pop}%</div>\n      </div>\n    ));\n    return (\n      <div className='hours-container'>\n        <div className='hours-header'>\n          <p className='large'>Hourly Forcast</p>\n        </div>\n        <div className='hours-roll'>{hourList}</div>\n      </div>\n    );\n  }\n}\n\nexport default HourlyData;\n","export default __webpack_public_path__ + \"static/media/snow.16bc2923.jpg\";","export default __webpack_public_path__ + \"static/media/cloudy.b547a3e7.jpg\";","export default __webpack_public_path__ + \"static/media/clear.a23f86ee.jpg\";","export default __webpack_public_path__ + \"static/media/thunderstorm.eeb02130.jpg\";","export default __webpack_public_path__ + \"static/media/rain.e2e29bb5.jpg\";","export default __webpack_public_path__ + \"static/media/weather.347d25f4.jpg\";","import React, { Component } from 'react';\nimport { fromUnixTime } from 'date-fns';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport WeatherData from './WeatherData';\nimport HourlyData from './HourlyData';\nimport snow from '../images/snow.jpg';\nimport cloudy from '../images/cloudy.jpg';\nimport clear from '../images/clear.jpg';\nimport thunderstorm from '../images/thunderstorm.jpg';\nimport rain from '../images/rain.jpg';\nimport weather from '../images/weather.jpg';\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 'metric',\n      error: null,\n      current: {},\n      hourly: [],\n    };\n    this.getCoords = this.getCoords.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n    this.changeScale = this.changeScale.bind(this);\n  }\n\n  componentDidMount(props) {\n    if (this.props.city) {\n      this.getWeather();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.city !== prevProps.city) {\n      this.getWeather();\n    } else if (this.props.units !== prevProps.units) {\n      this.changeScale(this.props.units);\n    }\n  }\n\n  getCoords() {\n    const coordinates = [];\n    if (this.isEmpty(this.props.city) === false) {\n      // Ṭhis should never fire but maybe update error if it does\n      console.log('getCoords error - -no city in props');\n    } else {\n      coordinates.push(this.props.city.lat, this.props.city.lon);\n    }\n    return coordinates;\n  }\n\n  async getWeather() {\n    const coords = this.getCoords();\n    const API_KEY = process.env.REACT_APP_MY_API;\n    const weatherData = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${coords[0]}&lon=${coords[1]}&units=${this.state.units}&exclude={part}&appid=${API_KEY}`\n    )\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(`Error Fetching Data. Reason: ${res.statusText}`);\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .catch((err) => {\n        this.setState({ error: err.message });\n      });\n    if (weatherData) {\n      this.updateWeatherState(weatherData);\n    }\n  }\n\n  updateWeatherState(data) {\n    this.updateBackground(data.current.weather[0].id);\n    const timezone = data.timezone;\n    const currentData = this.parseCurrentData(data.current, timezone);\n    const hourlyData = this.parseHourlyData(data.hourly, timezone);\n    this.setState({\n      error: null,\n      timezone: timezone,\n      current: currentData,\n      hourly: [...hourlyData],\n    });\n  }\n\n  updateBackground(weatherId) {\n    const htmlElement = document.documentElement;\n    let background;\n    if (weatherId < 300) {\n      background = thunderstorm;\n    } else if (weatherId < 600) {\n      background = rain;\n    } else if (weatherId < 700) {\n      background = snow;\n    } else if (weatherId === 800) {\n      background = clear;\n    } else if (weatherId > 800) {\n      background = cloudy;\n    } else {\n      background = weather;\n    }\n\n    htmlElement.style.backgroundImage = `url(${background})`;\n  }\n\n  parseCurrentData(data, timezone) {\n    const editedData = {\n      city: this.props.city.name,\n      country: this.props.city.country,\n      temp: Math.round(data.temp),\n      feels_like: Math.round(data.feels_like),\n      uvi: data.uvi,\n      details: data.weather[0].description,\n      icon: data.weather[0].icon,\n      humidity: data.humidity,\n    };\n\n    const dateTime = this.getDateTime(data.dt, timezone);\n    const sunrise = this.getTime(data.sunrise, timezone);\n    const sunset = this.getTime(data.sunset, timezone);\n    editedData.dt = dateTime;\n    editedData.sunrise = sunrise;\n    editedData.sunset = sunset;\n    return editedData;\n  }\n\n  getDateTime(data, timezone) {\n    var convertedDate = fromUnixTime(data);\n    const zonedDate = utcToZonedTime(convertedDate, timezone);\n    const pattern = 'EEEEEE dd MMM yyyy HH:mm';\n    const output = format(zonedDate, pattern, { timesZone: timezone });\n    return output;\n  }\n\n  getTime(data, timezone) {\n    const time = fromUnixTime(data);\n    const localTime = utcToZonedTime(time, timezone);\n    const pattern = 'HH:mm';\n    const output = format(localTime, pattern, { timeZone: timezone });\n    return output;\n  }\n\n  isEmpty = (obj) => {\n    return Object.keys(obj).length > 0;\n  };\n\n  // ######################\n  // convert temp scale\n\n  changeScale(units) {\n    if (units === 'imperial') {\n      this.setState({ units: 'imperial' }, () => {\n        this.convertTemp('imperial');\n      });\n    } else {\n      this.setState({ units: 'metric' }, () => {\n        this.convertTemp('metric');\n      });\n    }\n  }\n\n  convertTemp(scale) {\n    if (!this.state.current.temp) return;\n    const newHourly = this.updateHourlyTemps(scale);\n    let currentTemps = [this.state.current.temp, this.state.current.feels_like];\n    const newCurrentTemps = this.convertCurrentTemps(currentTemps, scale);\n    this.updateTemps(newCurrentTemps, newHourly);\n  }\n\n  convertCurrentTemps(array, scale) {\n    let newArray = [];\n    array.forEach((temp) => {\n      newArray.push(this.calcNewTemp(temp, scale));\n    });\n    return newArray;\n  }\n\n  updateHourlyTemps(scale) {\n    const copyHourly = this.state.hourly.map((obj) => ({ ...obj }));\n    const updatedArray = copyHourly.map((hour) => {\n      let newTemp = this.calcNewTemp(hour.temp, scale);\n      hour.temp = newTemp;\n      return hour;\n    });\n    return updatedArray;\n  }\n\n  calcNewTemp(temp, scale) {\n    if (scale === 'metric') {\n      const newTemp = this.getCelsiusFromFahrenheit(temp);\n      return newTemp;\n    } else {\n      const newTemp = this.getFahrenheitFromCelsius(temp);\n      return newTemp;\n    }\n  }\n\n  updateTemps(newCurrentTemps, newHourly) {\n    this.setState((prevState) => ({\n      current: {\n        ...prevState.current,\n        temp: newCurrentTemps[0],\n        feels_like: newCurrentTemps[1],\n      },\n      hourly: [...newHourly],\n    }));\n  }\n\n  getCelsiusFromFahrenheit(f) {\n    return Math.round((f - 32) * (5 / 9));\n  }\n\n  getFahrenheitFromCelsius(c) {\n    return Math.round(c * (9 / 5) + 32);\n  }\n\n  // ################################################################\n  //  process hourly data\n\n  parseHourlyData(data, timezone) {\n    data.splice(24);\n    const hourlyData = data.map((obj) => {\n      let convertedData = this.convertHourlyData(obj, timezone);\n      return convertedData;\n    });\n\n    return hourlyData;\n  }\n\n  convertHourlyData(hour, timezone) {\n    const resultObject = {\n      id: hour.dt,\n      temp: Math.round(hour.temp),\n      pop: Math.round(hour.pop * 100),\n      main: hour.weather[0].main,\n    };\n    const time = this.getTime(hour.dt, timezone);\n    resultObject.time = time;\n    return resultObject;\n  }\n\n  //   Render\n\n  render() {\n    return (\n      <div className='content-container'>\n        {this.state.error && (\n          <div className='error-box bigger'>\n            <div>{this.state.error}</div>\n          </div>\n        )}\n\n        {/* move city name in for the conditional below does it need a conditional itself? */}\n        {this.state.current.dt && (\n          <WeatherData data={this.state.current} units={this.state.units} />\n        )}\n\n        {this.state.hourly.length > 0 && (\n          <HourlyData hourly={this.state.hourly} units={this.state.units} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nconst icon = <FontAwesomeIcon icon={faSearch} />;\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      searchResult: {},\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(e) {\n    this.fetchCity(this.state.value);\n    e.preventDefault();\n  }\n\n  async fetchCity(city) {\n    const API_KEY = process.env.REACT_APP_MY_API;\n    const cityResult = await fetch(\n      `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&APPID=${API_KEY}`\n    )\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(`Error fetching data. Reason: ${res.statusText}`);\n        }\n\n        return res;\n      })\n      .then((res) => res.json())\n      .catch((err) => {\n        this.props.handleError(err.message);\n      });\n    if (cityResult) {\n      this.updateState(cityResult);\n    }\n  }\n\n  updateState(city) {\n    if (city.length < 1) {\n      this.setState({ searchError: true });\n      const message = 'Sorry: Not Found. Please try again';\n      this.props.handleError(message);\n    } else {\n      this.setState(\n        (prevState) => ({\n          value: '',\n          searchResult: city[0],\n          searchError: false,\n          error: null,\n        }),\n        () => {\n          this.props.submitForm(this.state.searchResult);\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className='form-area'>\n        <div className='logo'>\n          <h2>Rain or Shine?</h2>\n        </div>\n        <div className='search-bar'>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              type='text'\n              value={this.state.value}\n              placeholder='Search Location'\n              onChange={this.handleChange}\n            />\n\n            <button className='search' type='submit'>\n              {icon}\n            </button>\n          </form>\n        </div>\n\n        <div className='temp-switch'>\n          <label className='switch'>\n            <input\n              type='checkbox'\n              name='temp'\n              onClick={this.props.changeScale}\n            />\n            <span className='slider round'>\n              <div className='temp-letters'>\n                <span>C</span>\n                <span>F</span>\n              </div>\n            </span>\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div className='footer static-bar'>\n      <div className='explainer'>\n        <p>\n          Created as part of the{' '}\n          <a href='https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/weather-app'>\n            The Odin Project\n          </a>{' '}\n          by <a href='https://github.com/Jamesredux'>James Redux</a>.{' '}\n          <a href='https://github.com/Jamesredux/weather-app'>View Code</a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import './App.css';\nimport './reset.css';\nimport React, { Component } from 'react';\nimport Content from './components/content';\nimport Form from './components/form';\nimport Footer from './components/footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { city: null, units: 'metric', errorMessage: null };\n    this.updateCity = this.updateCity.bind(this);\n    this.changeScale = this.changeScale.bind(this);\n    this.handleError = this.handleError.bind(this);\n  }\n\n  updateCity(cityData) {\n    this.setState({\n      city: cityData,\n      errorMessage: null,\n    });\n  }\n\n  changeScale(e) {\n    if (e.target.checked) {\n      this.setState(\n        { units: 'imperial' }\n      );\n    } else {\n      this.setState(\n        { units: 'metric' }\n      );\n    }\n  }\n\n  handleError(message) {\n    this.setState({ city: null, errorMessage: message });\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Form\n          submitForm={this.updateCity}\n          changeScale={this.changeScale}\n          handleError={this.handleError}\n        />\n        {this.state.errorMessage && (\n          <div className='error-box'>\n            <p className='alert'>{this.state.errorMessage}</p>\n            <p className='small-text'>\n              To make search more precise put the city's name, comma, 2-letter\n              country code (ISO3166). Example: London, GB or London, CA\n            </p>\n          </div>\n        )}\n        {!this.state.errorMessage && (\n          <Content city={this.state.city} units={this.state.units} />\n        )}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}